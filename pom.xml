<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>no.kantega</groupId>
    <artifactId>pdf-converter-parent</artifactId>
    <version>0.2-SNAPSHOT</version>
    <packaging>pom</packaging>

    <!--
     Note: This project can be built on any machine. However, running the tests of the pdf-converter-transformer-msoffice-word
     module requires the following configuration:
      (1) An installation of the Microsoft Scripting Host (comes with most versions of MS Windows)
      (2) An installation of Microsoft Word 2007 or higher (MS Word 2007 additionally requires the PDF plugin)
      (3) Microsoft Word is not running when the built process is started and is neither started manually while the
          tests are running
      (4) Microsoft Word is properly activated and does not require any startup configuration - if MS Word is querying
          for configuration on program startup, any conversion attempts will fail
     If you cannot provide this setup, build this project with active "no-msoffice" profile and the corresponding
     tests will be skipped. In general, unit tests for the converters can fail since MS Word was not built for
     short-interval restarting. However, this happens rarely.

     Furthermore, for running the tests of the pdf-converter-server-standalone module, you require:
      (4) Your machine must have a free port and it must be possible to bind a server listener to this port
          (the Jersey related tests suggest port 9998 to be available for testing)

     Many tests throughout all modules require:
      (5) Possibility to create temporary folders on the local file system and creating, deleting and executing
          files in these folders

     Please note that Microsoft does not recommend or officially supports MS Office automation. Also note the legal
     requirements to run MS Office in a server context on 'http://support.microsoft.com/kb/257757'.

     Also, be careful when running a local MS Word transformer since it requires synchronization with MS Word.
     When the JVM running this program exits abnormally (for example by a user interrupt causing a process termination
     signal), the application cannot run any shut down hooks to terminate MS Word. The MS Word process will
     therefore leak. When developing and testing this application, always keep an eye on your machine's task manager.

     Profile summary:
      (1) ms-office: Runs tests that require MS Word and MS Windows.
      (2) extras: Build a shaded jar for the standalone conversion server as well as javadoc and source artifacts.
      (3) checks: Perform additional source code checks (activated by default)

     Note that MS Office does not officially support its execution in a service context. When run as a service, MS
     Office is always started with MS Window's local service account which does not configure a desktop. However, MS
     Office expects a desktop to exist in order to run properly. Without such a desktop configuration, MS Office will
     start up correctly but fail to read any input file. In order to allow MS Office to run in a service context, there
     are two possible approaches of which the first approach is more recommended:
      (1) On a 32-bit system, create the folder 'C:\Windows\System32\config\systemprofile\Desktop'.
          On a 64-bit system, create the folder 'C:\Windows\SysWOW64\config\systemprofile\Desktop'.
          For more information, see
          'http://social.msdn.microsoft.com/Forums/en-US/b81a3c4e-62db-488b-af06-44421818ef91/excel-2007-automation-on-top-of-a-windows-server-2008-x64?forum=innovateonoffice'.
      (2) You can manipulate MS Window's registry such that MS Office applications are run with another account than
          the local service account. For an explanation of this approach, see
          'http://social.technet.microsoft.com/Forums/en-US/334c9f30-4e27-4904-9e71-abfc65975e23/problem-running-windows-service-with-excel-object-on-windows-server-2008-64-bit?forum=officesetupdeploylegacy'.
    -->

    <modules>
        <module>pdf-converter-api</module>
        <module>pdf-converter-local</module>
        <module>pdf-converter-local-demo</module>
        <module>pdf-converter-transformer</module>
        <module>pdf-converter-transformer-api</module>
        <module>pdf-converter-transformer-msoffice</module>
        <module>pdf-converter-client</module>
        <module>pdf-converter-client-standalone</module>
        <module>pdf-converter-server</module>
        <module>pdf-converter-server-standalone</module>
        <module>pdf-converter-util-all</module>
        <module>pdf-converter-util-conversion</module>
        <module>pdf-converter-util-ws</module>
        <module>pdf-converter-test</module>
        <module>pdf-converter-util-standalone</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <shaded.classifier>shaded</shaded.classifier>
        <version.javax.rs>2.0</version.javax.rs>
        <version.javax.inject>1</version.javax.inject>
        <version.javax.annotation>1.2</version.javax.annotation>
        <version.jersey>2.6</version.jersey>
        <version.guava>14.0.1</version.guava>
        <version.zt-exec>1.5</version.zt-exec>
        <version.jopt-simple>4.5</version.jopt-simple>
        <version.slf4j>1.7.5</version.slf4j>
        <version.logback>1.1.2</version.logback>
        <version.junit>4.11</version.junit>
        <version.mockito>1.9.5</version.mockito>
        <version.thread-weaver>0.1</version.thread-weaver>
        <version.jetty>8.1.13.v20130916</version.jetty>
        <version.maven.compiler-plugin>3.1</version.maven.compiler-plugin>
        <version.maven.surefire-plugin>2.16</version.maven.surefire-plugin>
        <version.maven.source-plugin>2.2.1</version.maven.source-plugin>
        <version.maven.javadoc-plugin>2.9.1</version.maven.javadoc-plugin>
        <version.maven.war-plugin>2.3</version.maven.war-plugin>
        <version.maven.shade-plugin>2.1</version.maven.shade-plugin>
        <version.maven.release-plugin>2.4.1</version.maven.release-plugin>
        <version.maven.cobertura>2.6</version.maven.cobertura>
        <version.maven.coveralls>2.2.0</version.maven.coveralls>
        <version.maven.checkstyle>2.12.1</version.maven.checkstyle>
        <version.maven.resources>2.6</version.maven.resources>
        <version.maven.compiler>3.1</version.maven.compiler>
        <version.maven.install>2.5.1</version.maven.install>
        <version.java>1.6</version.java>
    </properties>

    <developers>
        <developer>
            <id>rafwin</id>
            <name>Rafael Winterhalter</name>
            <email>rafael.winterhalter@kantega.no</email>
            <url>http://mydailyjava.blogspot.com</url>
            <roles>
                <role>developer</role>
            </roles>
            <timezone>+1</timezone>
        </developer>
    </developers>

    <organization>
        <name>Kantega AS</name>
        <url>http://www.kantega.no</url>
    </organization>

    <inceptionYear>2013</inceptionYear>
    <url>https://github.com/kantega/pdf-converter</url>

    <name>pdf-converter</name>
    <description>A converter tool for converting MS Word files to PDF in a Java application.</description>

    <scm>
        <connection>scm:git:git@github.com:kantega/pdf-converter.git</connection>
        <developerConnection>scm:git:git@github.com:kantega/pdf-converter.git</developerConnection>
        <url>git@github.com:kantega/pdf-converter.git</url>
        <tag>pdf-converter-parent-0.1.2</tag>
    </scm>

    <issueManagement>
        <system>github.com</system>
        <url>https://github.com/kantega/pdf-converter/issues</url>
    </issueManagement>

    <dependencyManagement>
        <dependencies>
            <!-- General -->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${version.guava}</version>
            </dependency>

            <dependency>
                <groupId>org.zeroturnaround</groupId>
                <artifactId>zt-exec</artifactId>
                <version>${version.zt-exec}</version>
            </dependency>

            <dependency>
                <groupId>net.sf.jopt-simple</groupId>
                <artifactId>jopt-simple</artifactId>
                <version>${version.jopt-simple}</version>
            </dependency>

            <!-- Jersey -->
            <dependency>
                <groupId>org.glassfish.jersey</groupId>
                <artifactId>jersey-bom</artifactId>
                <version>${version.jersey}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- Java extensions -->
            <dependency>
                <groupId>javax.ws.rs</groupId>
                <artifactId>javax.ws.rs-api</artifactId>
                <version>${version.javax.rs}</version>
            </dependency>

            <dependency>
                <groupId>javax.inject</groupId>
                <artifactId>javax.inject</artifactId>
                <version>${version.javax.inject}</version>
            </dependency>

            <dependency>
                <groupId>javax.annotation</groupId>
                <artifactId>javax.annotation-api</artifactId>
                <version>${version.javax.annotation}</version>
            </dependency>

            <!-- Testing / Logging -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${version.slf4j}</version>
            </dependency>

            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-simple</artifactId>
                <version>${version.slf4j}</version>
            </dependency>

            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>${version.logback}</version>
            </dependency>

            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>jul-to-slf4j</artifactId>
                <version>${version.slf4j}</version>
            </dependency>

            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${version.junit}</version>
            </dependency>

            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-all</artifactId>
                <version>${version.mockito}</version>
            </dependency>

            <dependency>
                <groupId>com.googlecode.thread-weaver</groupId>
                <artifactId>threadweaver</artifactId>
                <version>${version.thread-weaver}</version>
            </dependency>

            <dependency>
                <groupId>org.eclipse.jetty.aggregate</groupId>
                <artifactId>jetty-all-server</artifactId>
                <version>${version.jetty}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <!-- Release configuration -->
            <plugin>
                <artifactId>maven-release-plugin</artifactId>
                <version>${version.maven.release-plugin}</version>
                <configuration>
                    <useReleaseProfile>false</useReleaseProfile>
                    <releaseProfiles>extras</releaseProfiles>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                </configuration>
            </plugin>

            <!-- Cobertura test case coverage -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>${version.maven.cobertura}</version>
                <configuration>
                    <aggregate>true</aggregate>
                    <formats>
                        <format>html</format>
                        <format>xml</format>
                    </formats>
                    <check/>
                </configuration>
            </plugin>

            <!-- Generate coveralls reports from Travis -->
            <plugin>
                <groupId>org.eluder.coveralls</groupId>
                <artifactId>coveralls-maven-plugin</artifactId>
                <version>${version.maven.coveralls}</version>
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${version.maven.resources}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${version.maven.install}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${version.maven.compiler}</version>
                    <inherited>true</inherited>
                    <configuration>
                        <source>${version.java}</source>
                        <target>${version.java}</target>
                        <encoding>${project.build.sourceEncoding}</encoding>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <profile>
            <id>extras</id>
            <build>
                <plugins>
                    <!-- Create source artifacts -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>${version.maven.source-plugin}</version>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Create javadoc artifacts -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>${version.maven.javadoc-plugin}</version>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Check style on build -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-checkstyle-plugin</artifactId>
                        <version>${version.maven.checkstyle}</version>
                        <executions>
                            <execution>
                                <id>validate</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                                <configuration>
                                    <configLocation>checkstyle.xml</configLocation>
                                    <consoleOutput>true</consoleOutput>
                                    <failsOnError>true</failsOnError>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>checks</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <!-- Check style on build -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-checkstyle-plugin</artifactId>
                        <version>${version.maven.checkstyle}</version>
                        <executions>
                            <execution>
                                <id>validate</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                                <configuration>
                                    <configLocation>checkstyle.xml</configLocation>
                                    <consoleOutput>true</consoleOutput>
                                    <failsOnError>true</failsOnError>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
